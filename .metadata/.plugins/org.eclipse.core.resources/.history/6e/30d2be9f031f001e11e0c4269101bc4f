package com.boa.customerapi.services;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.AbstractQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.boa.customerapi.models.Customer;
import com.boa.customerapi.repositories.CustomerRepo;

@Service
public class CustomerService {
	
	@Autowired
	private CustomerRepo customerRepo;
	@Autowired
	private EntityManager entityManager;
	
	//create
	
	public Customer addCustomer(Customer Customer) {
		if(Customer !=null) 		
  		 return this.customerRepo.save(Customer);
		else
			return null;
	}
	
	//retrieve
	public List<Customer> getAllCustomers(){
		return this.customerRepo.findAll();
	}
	
	public Customer getCustomerById(long customerId) {
		return this.customerRepo.findById(customerId).orElse(null);
	}
	
	//non primary key
	public List<Customer> findAllByFirstName(String firstName){
    	CriteriaBuilder cb= entityManager.getCriteriaBuilder();
    	AbstractQuery<Customer> cq=cb.createQuery(Customer.class);
    	
    	Root<Customer> CustomerObject=cq.from(Customer.class);
    	cq.where(cb.equal(CustomerObject.get("name").<String> get("firstName") ,firstName));
    	
    	CriteriaQuery<Customer> selectResult=((CriteriaQuery<Customer>)cq).select(CustomerObject);
    	TypedQuery<Customer> tq=entityManager.createQuery(selectResult);
    	return tq.getResultList();
    }

	
	
}
